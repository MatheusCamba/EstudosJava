JAVA
-O.O.
-Bibliotecas
-Codigo, apos compilado, transforma em bitycode. Simula o computador.
Traduz pra aquele sistema operacional. Maquina virtual/Virtual Machine Java.
-um executavel unico com um codigo unico, e um cara traduz para o sistema
operacional. O cara é a Virtual Machine Java.
- o Codigo seria o Java, q transforma no executavel q seria o Bytecode 
Java, e a virtual machine lanca pro sistema operacional.

-JRE é o ambiente para executar uma aplicação Java
-JDK é o ambiente para executar uma aplicação Java e possui ferramentas 
de desenvolvimento.

-chamar a Virtual Machine no prompt = java Programa(seria o nome da classe)
-o javac Programa.java faz o codigo ser compilado(C de compilar)

-IDEs para Java - netbeans, intelij, eclipse

-VARIAVEIS E CONTROLE DE FLUXO

-nas variaveis é importante o habito de declarar especificamente a variavel,
ou seja, sem resumos como add = adicionar, att = atualizar.

-possivel somar dentro de um console.log/system.out.print()

-println = pula a linha do console.
-pirnt = segue na mesma linha
-int = numeros inteiros. Pode guardar ate 2 milhoes.
-double = numeros decimais(150.10)
-long = guarda numeros inteiros q passa de 2 milhoes, vai ate 2bi²
Precisa colocar um l/L no final pra ele acietar. Ex.:
long numeroGrande = 32355655454l/L;
-short = guarda valores pequenos;
-byte = menor q o short;

-casting = (int/double) salario; Ele faz com que oq esteja ali na frente
seja forçado a ser aquilo, um int no caso. Contudo, no console.log, 
ele mostra como um int. Ou seja, nao mostra a casa decimal.

-char = guarda caracter. Contudo ele guarda apenas uma letra/caracter.
Guarda um UNICODE. Ele na real é um numero, contudo, tranforma conforme 
a tabela.

-String =  nao é palavra chave do Java. Serve para caracteres.
-boolean = sempre true ou false.

-sysout = console.log() . Recurso do Eclipse.
-if/else = se tem num if apenas uma linha de codigo para realizar a obrigacao
, não é necessario usar o as chaves{}

- || = ou
- && = e

-Atalho: main + ctrl + espaco;

	-JAVA POO

-objeto = instância
-classe
-o tipo da variavel que guarda uma instancia é o nome da classe que é referenciada.
- Referencia vs Objeto
-as variáveis nao tem um objeto dentro, no Java.

-Metodo é diferente de funcao, no Java. A syntax é um pouquinho estranha.
-"void" é uma palavra chave para afirmar que aquela funcao/metodo nao devolve nada.
-devemos tratar os objetos por seus metodos.
-"private" em um atributo => o atributo nao pode ser lido, modificado por ngm
a nao ser pela propria classe. Voce sempre pede para mexer naquilo que é privado.

-Estado consistente de um objeto. Quando esta tudo ok conforme as regras de negocio.

-Usamos um Constructor para definir o padrao. No exemplo, a agencia vem como padrao 0.

-o new Conta() é um contructor que ja se encontra no Java, naquele arquivo, mas 
invisivel. Lá vc pode iniciar alguns dados. Dizer q o this.saldo = 100 por exmeplo.

-O constructor pode receber parametros. Nesse caso vc pode passar agencia e numero
na conta por exemplo.

-static - palavra reservada para fazer que aquele tipo especifico seja da classe inteira.
o Static apenas vai acessar atributos estaticos daquela propria classe.

---------HERANÇA--------------
-Aproveitar classes/metodos dessas classes, ja criadas.
-Syntax = public class XXXXX extends XXXXX{}

	-Classe Mae/Base Class/Super Class --> nomes para a primeira classe da hierarquia.
	-Classe Filha --> a classe que puxa algo da mãe.

- protected --> modificador de visibilidade -  se encontra entre o "private" e o "public".
	significa que ele é publico para seus filhos.

- super.salario --> "super" é uma palavra reservada que tem o mesmo uso q o "this", 
contudo, ele é usado quando o atributo vem da classe mãe.

- reescrita de metodo - o nome ja diz, reescrevemos o metodo da classe mae, e mudamos
pouca coisa.

O primeiro pilar da herança é a REUTILIZAÇÃO. Contudo existe outro pilar, um pouco mais
complexo. O Polimorfismo.

---------POLIMORFISMO----------
Voce tem um objeto do tipo X, mas vc acaba tendo duas formas de chegar nesse objeto,
possui mais de uma referencia.

Podemos usar a referencia mais generica para serem usadas pelos outros. Fazendo 
com que eu elimine linhas de codigo.
